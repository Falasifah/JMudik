package com.firstwap.ams.service.middleware;

import com.firstwap.ams.service.middleware.ejb.listener.DeliveryListener;
import com.firstwap.ams.service.middleware.ejb.listener.DispatchErrorListener;
import com.firstwap.ams.service.middleware.ejb.listener.DispatchListener;
import com.rabbitmq.jms.admin.RMQConnectionFactory;
import com.zaxxer.hikari.HikariDataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.actuate.autoconfigure.metrics.orm.jpa.HibernateMetricsAutoConfiguration;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.ImportResource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jms.listener.DefaultMessageListenerContainer;
import org.springframework.jms.listener.MessageListenerContainer;
import org.springframework.jms.listener.SimpleMessageListenerContainer;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.TransactionManagementConfigurer;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.util.Properties;

//@SpringBootApplication
@ImportResource({"classpath:applicationContext.xml"})
@EnableAutoConfiguration(exclude = {HibernateMetricsAutoConfiguration.class})
@ComponentScan(basePackages = {"com.firstwap.ams.service.middleware"})
public class MiddlewareStarter implements TransactionManagementConfigurer
{

    private static final Logger log = LoggerFactory.getLogger(MiddlewareStarter.class);

    @Bean
    public DataSource dBServiceAltamidesSource ()
    {
        final HikariDataSource dataSource = new HikariDataSource();
        dataSource.setUsername("dev");
        dataSource.setPassword("1rstwap");
        dataSource.setJdbcUrl("jdbc:mysql://db.umi.ams:3306/");
        dataSource.setMaximumPoolSize(30);
        dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        return dataSource;
    }

//    @Bean
//    public RMQConnectionFactory connectionFactory() {
//        RMQConnectionFactory connectionFactory = new RMQConnectionFactory();
//        connectionFactory.setUsername("app");
//        connectionFactory.setPassword("1rstwap");
//        connectionFactory.setVirtualHost("/");
//        connectionFactory.setHost("db.umi.ams");
//        connectionFactory.setPort(5672);
//        return connectionFactory;
//    }
//
//    @Bean
//    public RMQDestination deliveryQueue() {
//        RMQDestination jmsDestination = new RMQDestination();
//        jmsDestination.setDestinationName("deliveryQueue");
//        jmsDestination.setAmqp(true);
//        jmsDestination.setAmqpQueueName("middleware-service");
//        return jmsDestination;
//    }
//
//    @Bean
//    public RMQDestination dispatchErrorQueue() {
//        RMQDestination jmsDestination = new RMQDestination();
//        jmsDestination.setDestinationName("dispatchErrorQueue");
//        jmsDestination.setAmqp(true);
//        jmsDestination.setAmqpQueueName("middleware-service");
//        return jmsDestination;
//    }

    @Bean
    public RMQConnectionFactory jmsConnectionFactory() {
        RMQConnectionFactory connectionFactory = new RMQConnectionFactory();
        connectionFactory.setUsername("app");
        connectionFactory.setPassword("1rstwap");
        connectionFactory.setVirtualHost("/");
        connectionFactory.setHost("db.umi.ams");

        return connectionFactory;
    }


    @Bean
    public javax.jms.ConnectionFactory connectionFactory() throws NamingException
    {
        Properties environmentParameters = new Properties();
        environmentParameters.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.fscontext.RefFSContextFactory");
        environmentParameters.put(Context.PROVIDER_URL, "file:/home/umi/PROJECTS/ALTAMIDES/altamides/altamides-app/servers/ams-service-middleware/src/main/resources");
        InitialContext ctx = new InitialContext(environmentParameters);

        javax.jms.ConnectionFactory connectionFactory = (javax.jms.ConnectionFactory) ctx.lookup("ConnectionFactory");
        return connectionFactory;
    }

    @Bean
    public MessageListenerContainer messageListenerContainer() throws NamingException
    {
        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
        container.setConnectionFactory(jmsConnectionFactory());
        container.setDestinationName("dispatchQueue");

        container.setMessageListener(new DispatchListener());
        return container;

    }

    @Bean
    public DefaultMessageListenerContainer dispatchListenerContainer() throws NamingException
    {
        DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
        container.setConnectionFactory(connectionFactory());
        container.setDestinationName("dispatchQueue");
        container.setSessionTransacted(true);
        container.setConcurrentConsumers(5);
        container.setMaxConcurrentConsumers(5);
        /*MessageListenerAdapter adapter = new MessageListenerAdapter(new Object() {

            @SuppressWarnings("unused")
            public String handleMessage(String in) {
                return in.toUpperCase();
            }

        });*/
        container.setMessageListener(new DispatchListener());
        return container;
    }


    @Bean
    public DefaultMessageListenerContainer dispatchErrorListenerContainer() throws NamingException
    {
        DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
        container.setConnectionFactory(connectionFactory());
        container.setDestinationName("dispatchErrorQueue");
        container.setSessionTransacted(true);
        container.setConcurrentConsumers(5);
        container.setMaxConcurrentConsumers(5);
        /*MessageListenerAdapter adapter = new MessageListenerAdapter(new Object() {

            @SuppressWarnings("unused")
            public String handleMessage(String in) {
                return in.toUpperCase();
            }

        });*/
        container.setMessageListener(new DispatchErrorListener());
        return container;
    }


    @Bean
    public DefaultMessageListenerContainer deliveryListenerContainer() throws NamingException
    {
        DefaultMessageListenerContainer container = new DefaultMessageListenerContainer();
        container.setConnectionFactory(connectionFactory());
        container.setDestinationName("deliveryQueue");
        container.setSessionTransacted(true);
        container.setConcurrentConsumers(5);
        container.setMaxConcurrentConsumers(5);
        /*MessageListenerAdapter adapter = new MessageListenerAdapter(new Object() {

            @SuppressWarnings("unused")
            public String handleMessage(String in) {
                return in.toUpperCase();
            }

        });*/
        container.setMessageListener(new DeliveryListener());
        return container;
    }

    @Bean
    public PlatformTransactionManager txManager()
    {
        return new DataSourceTransactionManager(dBServiceAltamidesSource());
    }

    @Override
    public PlatformTransactionManager annotationDrivenTransactionManager()
    {
        return txManager();
    }


    public static void main(String[] args)
    {
        SpringApplication.run(MiddlewareStarter.class, args);
    }
}
