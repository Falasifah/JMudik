/**
 * File name      : DatabasePreference.java
 * Created on     : 
 * Author         : 
 * 
 * Change Log:
 * Author     Date           Version          Notes
 * =========================================================================
 * adi		 02 Sep 2014					Fix middleware jobs, 
 * 											Task #2051 add retry update function
 * -------------------------------------------------------------------------
 **/

package com.firstwap.middleware.preference;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class DatabasePreference extends LoggerPreference {

	private static final long serialVersionUID = 1L;
	
    public static String LOCATION_SINGLE_USE_DATASOURCE;
    
    public static String LOCATION_SINGLE_USE ;
    public static String LOCATION_TRACKING ;
    public static String CELL_DB ;
    public static String FIRST_INTERMEDIA ;
    public static String LRTP_V2 ;
    public static String SMSDISPATCHER ;
    public static int UPDATE_MAX_RETRY = 10;
    public static int UPDATE_WAIT_LOCK_MS = 500;
    
    @Value("${LOCATION_SINGLE_USE_DATASOURCE:java:jboss/datasources/LOCATION_SINGLE_USEDS}")
    private void setLOCATION_SINGLE_USE_DATASOURCE(
			String lOCATION_SINGLE_USE_DATASOURCE) {
		LOCATION_SINGLE_USE_DATASOURCE = lOCATION_SINGLE_USE_DATASOURCE;
	}



    @Value("${LOCATION_SINGLE_USE:LOCATION_SINGLE_USE}")
    private void setLOCATION_SINGLE_USE(String lOCATION_SINGLE_USE) {
		LOCATION_SINGLE_USE = lOCATION_SINGLE_USE;
	}



    @Value("${LOCATION_TRACKING:LOCATION_TRACKING}")
    private void setLOCATION_TRACKING(String lOCATION_TRACKING) {
		LOCATION_TRACKING = lOCATION_TRACKING;
	}


    
    @Value("${CELL_DB:CELL_DB}")
    private void setCELL_DB(String cELL_DB) {
		CELL_DB = cELL_DB;
	}



    @Value("${First_Intermedia:First_Intermedia}")
    private void setFIRST_INTERMEDIA(String fIRST_INTERMEDIA) {
		FIRST_INTERMEDIA = fIRST_INTERMEDIA;
	}


    @Value("${LRTP_V2:LRTP_V2}")
    private void setLRTP_V2(String lRTP_V2) {
		LRTP_V2 = lRTP_V2;
	}


    @Value("${SMSDISPATCHER:SMSDISPATCHER}")
    private void setSMSDISPATCHER(String sMSDISPATCHER) {
		SMSDISPATCHER = sMSDISPATCHER;
	}

    public String toString(){
    	StringBuilder builder = new StringBuilder();
    	builder.append("Middleware database preference[LOCATION_SINGLE_USE_DATASOURCE =");
    	builder.append(LOCATION_SINGLE_USE_DATASOURCE);
    	builder.append(", LOCATION_SINGLE_USE=");
    	builder.append(LOCATION_SINGLE_USE);
    	builder.append(", LOCATION_TRACKING=");
    	builder.append(LOCATION_TRACKING);
    	builder.append(", CELL_DB=");
    	builder.append(CELL_DB);
    	builder.append(", FIRST_INTERMEDIA=");
    	builder.append(FIRST_INTERMEDIA);
    	builder.append(", LRTP_V2=");
    	builder.append(LRTP_V2);
    	builder.append(",SMSDISPATCHER=");
    	builder.append(SMSDISPATCHER);
    	builder.append(",UPDATE_MAX_RETRY=");
    	builder.append(UPDATE_MAX_RETRY);
    	builder.append(",UPDATE_WAIT_LOCK_MS=");
    	builder.append(UPDATE_WAIT_LOCK_MS);
    	return builder.toString();
    }
     

	
}
