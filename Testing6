

package com.firstwap.middleware.ejb.scheduling;

import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Session;
import javax.persistence.PersistenceException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.firstwap.middleware.ejb.entity.SmsDispatcher;
import com.firstwap.middleware.ejb.service.DispatcherService;
import com.firstwap.middleware.preference.DatabasePreference;
import com.firstwap.middleware.preference.SmsDispatcherPreference;

@Component
@Scope(value="singleton")
public class DeliverySchedulingBean implements SchedulingBean {
	
	private static final Logger logger = LoggerFactory.getLogger(DeliverySchedulingBean.class);
	
	@Resource(mappedName = "java:/ConnectionFactory")
	private ConnectionFactory connectionFactory;
	
	@Resource(mappedName = "java:/queue/deliveryQueue")
	private Destination destination;
	
	@Autowired
	private DispatcherService dispatcherService;
	
	private int pageNo = 1;
	private Long lastId = null;

	public void schedule() {
		
		logger.debug("Getting dispatched messages, page : {}", this.pageNo);

		Runnable releaseUnfinishedDeliveryJob = new Runnable() {
			public void run() {
				logger.info("try release unfinished dispatched job");
				dispatcherService.releaseUnfinishedDeliveryJob();
			}
		};
		executeRetryableUpdate(releaseUnfinishedDeliveryJob);
		
		Runnable acquireSmsDelivery = new Runnable() {
			public void run() {
				logger.info("try to acquire delivery job");
				dispatcherService.acquireSmsDelivery(lastId);
			}
		};
		executeRetryableUpdate(acquireSmsDelivery);
		
		logger.debug("try to get dispatched job");
		List<SmsDispatcher> localList = dispatcherService.getDispatchedMessages(this.pageNo, lastId);
		logger.info("running delivery scheduler got {} messages", localList.size());
		
		
		if (localList.size() != 0) {
			
			this.pageNo += 1;
			SmsDispatcher smsDispatcher = localList.get(localList.size()-1);
			if (smsDispatcher != null) {
				this.lastId = smsDispatcher.getID();
			}

		} else {
			
			logger.debug("Page {} has zero results! Setting page to 1", this.pageNo);
			
			this.pageNo = 1;
			this.lastId = null;
			localList.clear();
			localList = null;
			
			logger.debug("delivery scheduler finished");
			return;
		}
		
		sendMessage(localList);
		localList.clear();
		localList = null;
		logger.debug("delivery scheduler finished");
	}

	public void scheduleNoPage() {
		
		dispatcherService.releaseUnfinishedDeliveryJob();
		List<SmsDispatcher> list = dispatcherService.getDispatchedMessages();
		sendMessage(list);
	}

	private void sendMessage(List<SmsDispatcher> list) {
		
		Connection connection = null;
		Session session = null;
		MessageProducer producer = null;
		
		try {
			
			connection = this.connectionFactory.createConnection();
			session = connection.createSession(true, 1);
			connection.start();
			producer = session.createProducer(this.destination);
			
			Iterator<SmsDispatcher> iterator = list.iterator();
			
			while (iterator.hasNext()) {
				
				SmsDispatcher smsDispatcher = (SmsDispatcher) iterator.next();
				
				logger.debug("sending delivery entry {} ", smsDispatcher);
				
				String queuedServerName = smsDispatcher.getServerName();
				
				if(SmsDispatcherPreference.SMS_QUEUED_SUFFIX!=null){
					queuedServerName += SmsDispatcherPreference.SMS_QUEUED_SUFFIX;
				}
				
				smsDispatcher.setServerName(queuedServerName);
				dispatcherService.saveSmsDispacther(smsDispatcher);
				
				ObjectMessage objectMessage = session.createObjectMessage();
				objectMessage.setObject(smsDispatcher);
				producer.send(objectMessage);
			}
			
			session.commit();
			
		} catch (JMSException e) {
			
			logger.error(e.getMessage(), e);
			
		} finally {
			
			try {
				
				if (connection != null)
					connection.stop();
				
				if (producer != null)
					producer.close();
				
				if (session != null)
					session.close();
				
				if (connection != null)
					connection.close();
				
			} catch (JMSException e) {
				
				logger.error(e.getMessage(), e);
			}
		}
	}
	
	private void executeRetryableUpdate (Runnable updateTask){
		boolean retry = true;
		int retryCounter = 0;
		while(retry){
			try {
				retry = false;
				retryCounter++;
				updateTask.run();
			} catch (PersistenceException e) {
				retry = retryCounter > DatabasePreference.UPDATE_MAX_RETRY?false:true;
				logger.info("waiting lock...");
				try {
					Thread.sleep(DatabasePreference.UPDATE_WAIT_LOCK_MS);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		}
	}
}
