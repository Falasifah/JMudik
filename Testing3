/**
 * File name      : DeliveryListener.java
 * Created on     : 
 * Author         : 
 * 
 * Change Log:
 * Author     Date           Version          Notes
 * =========================================================================
 * adi		 02 Sep 2014					Fix middleware jobs
 * -------------------------------------------------------------------------
 **/

package com.firstwap.middleware.ejb.listener;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.ObjectMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.firstwap.middleware.ejb.entity.ReasonMaster;
import com.firstwap.middleware.ejb.entity.SmsDispatcher;
import com.firstwap.middleware.ejb.entity.UserMessageStatus;
import com.firstwap.middleware.ejb.service.DispatcherService;
import com.firstwap.middleware.preference.SmsDispatcherPreference;

@Component("deliveryListener")
public class DeliveryListener implements MessageListener {
	
	private static final Logger logger = LoggerFactory.getLogger(DeliveryListener.class);

	private final String ERROR_CODE_DELIVERY_FAILED = "300+0+0+0";
	
	@Autowired
	private DispatcherService dispatcherService;
	
	private SmsDispatcherPreference preference = new SmsDispatcherPreference();

	public void onMessage(Message message) {
		
		ObjectMessage om = (ObjectMessage) message;
		SmsDispatcher smsdisp = null;
		Date now = new Date();

		try {

			smsdisp = (SmsDispatcher) om.getObject();
			Date prevRunDate = smsdisp.getRunDate();
			Long smsDispId = smsdisp.getID();
			
			smsdisp = dispatcherService.getSmsDispatcher(smsdisp);
			
			if(smsdisp == null){
				logger.info("This smsDispId {} was deleted", smsDispId);
				return;
			}else if(smsdisp.getRunDate() == null || prevRunDate.compareTo(smsdisp.getRunDate()) != 0){
				logger.info("This smsDispId {} was acquired by another process", smsDispId);
				return;
			}
			
			smsdisp.setServerName(null);
			smsdisp.setRunDate(null);
			logger.debug("releaseDispatchJob {} {}", preference.SERVER_NAME,smsDispId);
			
			List<UserMessageStatus> list = dispatcherService.getUserMessageStatus(smsdisp.getTranID());
			
			if (list.size() == 0) {
				
				logger.error("Transaction ID [{}] cannot be found in USER_MESSAGE_STATUS.", smsdisp.getTranID());

				smsdisp.setDelvStat("5");
				smsdisp.setStatReason("AC");

				dispatcherService.saveSmsDispacther(smsdisp);

				return;
			}

			UserMessageStatus ums = list.get(0);
			logger.debug("Delivering : {}", ums);

			String messageStatus = ums.getMessageStatus();
			Timestamp statusDatetime = ums.getStatusDatetime();

			if(smsdisp.getDateStampSent()!=null){
				if(now.getTime() - smsdisp.getDateStampSent().getTime() > preference.DELIVERY_EXPIRED_MINUTES * 60 * 1000){
					messageStatus = ERROR_CODE_DELIVERY_FAILED;
					statusDatetime = new Timestamp(now.getTime());
				}
			}

			ReasonMaster rm = dispatcherService.getReasonMaster(messageStatus);
			
			if (rm != null) {
				smsdisp.setDelvStat(getMappedStatus(rm.getStatus()));
				smsdisp.setStatReason(rm.getReference() + "|" + messageStatus);
			} else {
				logger.error("Error code [{}] has no corresponding entry in table REASON_MASTER", messageStatus);
			}

			smsdisp.setDateStampDelv(statusDatetime);

			logger.debug("persisting smsdisp: " + smsdisp);
			dispatcherService.saveSmsDispacther(smsdisp);

		} catch (JMSException e) {
			
			logger.error(e.getMessage(),e);
			
		} catch (Exception e) {
			
			logger.error(e.getMessage(),e);
		}
	}

	private String getMappedStatus(String status) {
		
		if (status.equalsIgnoreCase("Delivered")) {
			
			return "1";
			
		} else if (status.equalsIgnoreCase("Undelivered")) {
			
			return "2";
			
		} else if (status.equalsIgnoreCase("Unknown")) {
			
			return "4";
			
		} else if (status.equalsIgnoreCase("Pending")) {
			
			return "0";
		}

		return "3";
	}
}
